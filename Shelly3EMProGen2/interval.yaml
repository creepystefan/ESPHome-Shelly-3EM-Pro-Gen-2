substitutions:
  ShellyIP: "HERE IP FROM SHELLY" 
    
http_request:
  useragent: esphome/device
  verify_ssl: false
  watchdog_timeout: 7s  # more as timeout

  
interval:
  - interval: 1s
    then:
      - http_request.get:
          url: http://${ShellyIP}/rpc/Shelly.GetStatus
          capture_response: true
          max_response_buffer_size: 4096
          on_response:
            then:
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                      id(id).publish_state(root["em:0"]["id"].as< float >());
                      
                      id(a_voltage).publish_state(root["em:0"]["a_voltage"].as< float >());
                      id(a_current).publish_state(root["em:0"]["a_current"].as< float >());
                      id(a_freq).publish_state(root["em:0"]["a_freq"].as< float >());
                      id(a_act_power).publish_state(root["em:0"]["a_act_power"].as< float >());
                      id(a_aprt_power).publish_state(root["em:0"]["a_aprt_power"].as< float >());
                      id(a_pf).publish_state(root["em:0"]["a_pf"].as< float >());

                      id(b_voltage).publish_state(root["em:0"]["b_voltage"].as< float >());
                      id(b_current).publish_state(root["em:0"]["b_current"].as< float >());
                      id(b_freq).publish_state(root["em:0"]["b_freq"].as< float >());
                      id(b_act_power).publish_state(root["em:0"]["b_act_power"].as< float >());
                      id(b_aprt_power).publish_state(root["em:0"]["b_aprt_power"].as< float >());
                      id(b_pf).publish_state(root["em:0"]["b_pf"].as< float >());
                      
                      id(c_voltage).publish_state(root["em:0"]["c_voltage"].as< float >());
                      id(c_current).publish_state(root["em:0"]["c_current"].as< float >());
                      id(c_freq).publish_state(root["em:0"]["c_freq"].as< float >());
                      id(c_act_power).publish_state(root["em:0"]["c_act_power"].as< float >());
                      id(c_aprt_power).publish_state(root["em:0"]["c_aprt_power"].as< float >());
                      id(c_pf).publish_state(root["em:0"]["c_pf"].as< float >());
                                          
                      return true;
                  });


 #                     id(c_freq).publish_state(root["em:0"]["c_freq"]);
 #                     
 #                 });
